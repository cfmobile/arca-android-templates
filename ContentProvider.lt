{{$package := .PackageName}}
{{$project := .ProjectName}}
{{$path := .PackagePath}}
<<levo filename:{{titlecase $project}}ContentProvider.java directory:src/{{$path}}/providers>>
package {{$package}}.providers;

import android.net.Uri;

import com.arca.provider.DatabaseProvider;
{{range .Models}}!>
import {{$package}}.datasets.{{titlecase .Name}}Table;
{{end}}!>

public class {{titlecase $project}}ContentProvider extends DatabaseProvider {

	public static final String AUTHORITY = "{{$package}}.providers.{{titlecase $project}}ContentProvider";

	public static final class Uris {
		{{range .Models}}!>
		public static final Uri {{pluralize .Name | snakecase | upper}} = Uri.parse("content://" + AUTHORITY + "/" + Paths.{{pluralize .Name | snakecase | upper}});
		{{end}}!>
	}

	private static final class Paths {
		{{range .Models}}!>
		public static final String {{pluralize .Name | snakecase | upper}} = "{{pluralize .Name | snakecase}}";
		{{end}}!>
	}

	@Override
	public boolean onCreate() {
		{{range .Models}}!>
		registerDataset(AUTHORITY, Paths.{{pluralize .Name | snakecase | upper}}, {{titlecase .Name}}Table.class);
		registerDataset(AUTHORITY, Paths.{{pluralize .Name | snakecase | upper}} + "/*", {{titlecase .Name}}Table.class);
		{{end}}!>
		return true;
	}

}
<<levo>>
{{range .Models}}
<<levo filename:{{titlecase .Name}}Table.java directory:src/{{$path}}/datasets>>
package {{$package}}.datasets;

import com.arca.provider.Column;
import com.arca.provider.SQLiteTable;
import com.arca.provider.Unique;
import com.arca.provider.Unique.OnConflict;

public class {{titlecase .Name}}Table extends SQLiteTable {

	public static interface ColumnNames {
	{{range .Properties}}!>
		{{if isSqliteType .}}!>
		public static final String {{snakecase .LocalIdentifier | upper}} = "{{.LocalIdentifier}}";
		{{end}}!>
	{{end}}!>
	}

	public static interface Columns extends SQLiteTable.Columns {
	{{range $index, $prop := .Properties}}!>
		{{if isSqliteType .}}!>
			{{if eq $index 0}}!>
		@Unique(OnConflict.REPLACE)
			{{end}}!>
		public static final Column {{snakecase .LocalIdentifier | upper}} = Column.Type.{{toSqliteType .}}.newColumn(ColumnNames.{{snakecase .LocalIdentifier | upper}});
		{{end}}!>
	{{end}}!>
	}
}
<<levo>>
{{end}}
<<levo filename:arca-provider-v1.0-beta.jar directory:libs>>
{{template "arca-provider-v1.0-beta.jar"}}
<<levo>>