{{$package := .PackageName}}
{{$project := .ProjectName}}
{{$path := .PackagePath}}
<<levo filename:{{titlecase $project}}ContentProvider.java directory:app/src/main/java/{{$path}}/application>>
package {{$package}}.application;

import android.net.Uri;

import io.pivotal.arca.provider.DatabaseProvider;
import io.pivotal.arca.provider.Column;
import io.pivotal.arca.provider.SQLiteTable;
import io.pivotal.arca.provider.Unique;
import io.pivotal.arca.provider.Unique.OnConflict;

public class {{titlecase $project}}ContentProvider extends DatabaseProvider {

	public static final String AUTHORITY = {{titlecase $project}}ContentProvider.class.getName();

	private static final Uri BASE_URI = Uri.parse("content://" + AUTHORITY);

	public static final class Uris {
		{{range .Models}}!>
		public static final Uri {{pluralize .Name | snakecase | upper}} = Uri.withAppendedPath(BASE_URI, Paths.{{pluralize .Name | snakecase | upper}});
		{{end}}!>
	}

	private static final class Paths {
		{{range .Models}}!>
		public static final String {{pluralize .Name | snakecase | upper}} = "{{pluralize .Name | snakecase}}";
		{{end}}!>
	}

	@Override
	public boolean onCreate() {
		{{range .Models}}!>
		registerDataset(AUTHORITY, Paths.{{pluralize .Name | snakecase | upper}}, {{titlecase .Name}}Table.class);
		registerDataset(AUTHORITY, Paths.{{pluralize .Name | snakecase | upper}} + "/*", {{titlecase .Name}}Table.class);
		{{end}}!>
		return true;
	}
	
	{{range .Models}}
	public static class {{titlecase .Name}}Table extends SQLiteTable {
		public static interface Columns extends SQLiteTable.Columns {
		{{range $index, $prop := .Properties}}!>
			{{if isSqliteType .}}!>
				{{if eq $index 0}}!>
			@Unique(OnConflict.REPLACE)
				{{end}}!>
			@Column(Column.Type.{{toSqliteType .}})
			public static final String {{snakecase .LocalIdentifier | upper}} = "{{.LocalIdentifier}}";

			{{end}}!>
		{{end}}!>
		}
	}
	{{end}}
}
<<levo>>