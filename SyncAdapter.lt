{{$package := .PackageName}}
{{$project := .ProjectName}}
{{$features := .Features}}
{{$path := .PackagePath}}
{{if $features.sync}}
<<levo filename:{{titlecase $project}}SyncAdapter.java directory:src/{{$path}}/application>>
package {{$package}}.application;

import android.accounts.Account;
import android.content.AbstractThreadedSyncAdapter;
import android.content.ContentProviderClient;
import android.content.Context;
import android.content.SyncResult;
import android.os.Bundle;

import io.pivotal.arca.service.OperationService;
{{range .Models}}!>
import {{$package}}.operations.Get{{titlecase .Name}}ListOperation;
{{end}}!>
import {{$package}}.providers.{{titlecase $project}}ContentProvider;

public class {{titlecase $project}}SyncAdapter extends AbstractThreadedSyncAdapter {

	public {{titlecase $project}}SyncAdapter(final Context context, final boolean autoInitialize) {
		super(context, autoInitialize);
	}

	@Override
	public void onPerformSync(final Account account, final Bundle extras, final String authority, final ContentProviderClient provider, final SyncResult syncResult) {
		{{range .Models}}!>
		OperationService.start(getContext(), new Get{{titlecase .Name}}ListOperation({{titlecase $project}}ContentProvider.Uris.{{pluralize .Name | snakecase | upper}}));
		{{end}}!>
	}

}
<<levo>>
<<levo filename:{{titlecase $project}}SyncAdapterService.java directory:src/{{$path}}/application>>
package {{$package}}.application;

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.os.IBinder;

public class {{titlecase $project}}SyncAdapterService extends Service {

	private static {{titlecase $project}}SyncAdapter sSyncAdapter;
	
	@Override
	public void onCreate() {
		super.onCreate();
		
		synchronized (this) {
			if (sSyncAdapter == null) {
				final Context context = getApplicationContext();
				sSyncAdapter = new {{titlecase $project}}SyncAdapter(context, true);
			}
		}
	}
	
	@Override
	public IBinder onBind(Intent intent) {
		return sSyncAdapter.getSyncAdapterBinder();
	}

}
<<levo>>
<<levo filename:syncadapter.xml directory:res/xml>>
<sync-adapter xmlns:android="http://schemas.android.com/apk/res/android"
	android:accountType="{{$package}}.account"
	android:allowParallelSyncs="false"
	android:contentAuthority="{{$package}}.providers.{{titlecase $project}}ContentProvider"
	android:isAlwaysSyncable="true"
	android:supportsUploading="true"
	android:userVisible="true" />
<<levo>>
<<levo filename:{{titlecase $project}}Authenticator.java directory:src/{{$path}}/application>>
package {{$package}}.application;

import android.accounts.AbstractAccountAuthenticator;
import android.accounts.Account;
import android.accounts.AccountAuthenticatorResponse;
import android.accounts.AccountManager;
import android.accounts.NetworkErrorException;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;

import {{$package}}.activities.LoginActivity;

public class {{titlecase $project}}Authenticator extends AbstractAccountAuthenticator {

	public static final String ACCOUNT_NAME = "{{titlecase $project}}";
	public static final String ACCOUNT_TYPE = "{{$package}}.account";
	public static final String AUTH_TOKEN_TYPE = "{{$package}}.token";

	private final Context mContext;

	public {{titlecase $project}}Authenticator(final Context context) {
		super(context);
		mContext = context;
	}

	@Override
	public Bundle addAccount(final AccountAuthenticatorResponse response, final String accountType, final String authTokenType, final String[] requiredFeatures, final Bundle options) throws NetworkErrorException {
		return newAccountBundle(mContext, response);
	}

	@Override
	public Bundle confirmCredentials(final AccountAuthenticatorResponse response, final Account account, final Bundle options) throws NetworkErrorException {
		return null;
	}

	@Override
	public Bundle editProperties(final AccountAuthenticatorResponse response, final String accountType) {
		return null;
	}

	@Override
	public Bundle getAuthToken(final AccountAuthenticatorResponse response, final Account account, final String authTokenType, final Bundle options) throws NetworkErrorException {
		return newAuthTokenBundle(mContext, response, account, authTokenType, options);
	}

	@Override
	public String getAuthTokenLabel(final String authTokenType) {
		return null;
	}

	@Override
	public Bundle hasFeatures(final AccountAuthenticatorResponse response, final Account account, final String[] features) throws NetworkErrorException {
		return newResultBundle(true);
	}

	@Override
	public Bundle updateCredentials(final AccountAuthenticatorResponse response, final Account account, final String authTokenType, final Bundle options) throws NetworkErrorException {
		return null;
	}
	
	
	// =============================================
	
	
	private static Bundle newAccountBundle(final Context context, final AccountAuthenticatorResponse response) {
		final Intent intent = new Intent(context, LoginActivity.class);
		intent.putExtra(AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE, response);
		final Bundle bundle = new Bundle();
		bundle.putParcelable(AccountManager.KEY_INTENT, intent);
		return bundle;
	}
	
	private static Bundle newResultBundle(final boolean result) {
		final Bundle bundle = new Bundle();
		bundle.putBoolean(AccountManager.KEY_BOOLEAN_RESULT, result);
		return bundle;
	}
	
	private static Bundle newErrorBundle(final String message) {
		final Bundle bundle = new Bundle();
		bundle.putString(AccountManager.KEY_ERROR_MESSAGE, message);
		return bundle;
	}
	
	private static Bundle newAuthTokenBundle(final Context context, final AccountAuthenticatorResponse response, final Account account, final String authTokenType, final Bundle options) throws NetworkErrorException {
		if (!authTokenType.equals(AUTH_TOKEN_TYPE)) {
			return newErrorBundle("Invalid Auth Token Type");
		}
		
		final AccountManager manager = AccountManager.get(context);
		final String authToken = manager.peekAuthToken(account, authTokenType);

		if (!TextUtils.isEmpty(authToken)) {
			return newAuthTokenBundle(account, authToken);
		} else {
			return newAccountBundle(context, response);
		}
	}

	public static Bundle newAuthTokenBundle(final Account account, final String authToken) {
		final Bundle result = new Bundle();
		result.putString(AccountManager.KEY_ACCOUNT_NAME, account.name);
		result.putString(AccountManager.KEY_ACCOUNT_TYPE, account.type);
		result.putString(AccountManager.KEY_AUTHTOKEN, authToken);
		return result;
	}
}
<<levo>>
<<levo filename:{{titlecase $project}}AuthenticatorService.java directory:src/{{$path}}/application>>
package {{$package}}.application;

import android.app.Service;
import android.content.Intent;
import android.os.IBinder;

public class {{titlecase $project}}AuthenticatorService extends Service {

	private {{titlecase $project}}Authenticator mAuthenticator;

	@Override
	public void onCreate() {
		super.onCreate();
		
		if (mAuthenticator == null) { 
			mAuthenticator = new {{titlecase $project}}Authenticator(this);
		}
	}
	
	@Override
	public IBinder onBind(final Intent intent) {
		return mAuthenticator.getIBinder();
	}
}
<<levo>>
<<levo filename:authenticator.xml directory:res/xml>>
<account-authenticator xmlns:android="http://schemas.android.com/apk/res/android"
	android:accountType="{{$package}}.account"
	android:icon="@drawable/ic_launcher"
	android:smallIcon="@drawable/ic_launcher"
	android:label="@string/app_name" />
<<levo>>
<<levo filename:LoginActivity.java directory:src/{{$path}}/activities>>
package {{$package}}.activities;

import android.accounts.Account;
import android.accounts.AccountManager;
import android.app.Activity;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;

import {{$package}}.R;
import {{$package}}.application.{{titlecase $project}}Authenticator;
import {{$package}}.providers.{{titlecase $project}}ContentProvider;

public class LoginActivity extends Activity {
	
	private static final int ONE_DAY = 60 * 60 * 24;
	
	public static final void newInstance(final Context context) {
		final Intent intent = new Intent(context, LoginActivity.class);
		context.startActivity(intent);
	}
	
	@Override
	protected void onCreate(final Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_login);
		
		if (getAccounts().length > 0) {
			finish();
		}
	}
	
	private Account[] getAccounts() {
		final String type = {{titlecase $project}}Authenticator.ACCOUNT_TYPE;
		final AccountManager manager = AccountManager.get(this);
		final Account[] accounts = manager.getAccountsByType(type);
		return accounts;
	}
	
	public void onAddAccountClicked(final View view) {
		setupAccount(this);
		finish();
	}
	
	private static void setupAccount(final Context context) {
		final String name = {{titlecase $project}}Authenticator.ACCOUNT_NAME;
		final String type = {{titlecase $project}}Authenticator.ACCOUNT_TYPE;
		final String authority = {{titlecase $project}}ContentProvider.AUTHORITY;
		final Account account = new Account(name, type);
		
		ContentResolver.setIsSyncable(account, authority, 1);
		ContentResolver.setSyncAutomatically(account, authority, true);
		ContentResolver.addPeriodicSync(account, authority, Bundle.EMPTY, ONE_DAY);
		
		final AccountManager manager = AccountManager.get(context);
		manager.addAccountExplicitly(account, null, null);
		manager.setAuthToken(account, type, "");
	}
}
<<levo>>
<<levo filename:activity_login.xml directory:res/layout>>
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
	android:layout_width="match_parent"
	android:layout_height="match_parent"
	android:orientation="vertical"
	android:background="#000"
	android:gravity="center">
	
	<TextView
		android:layout_width="match_parent"
		android:layout_height="match_parent"
		android:text="@string/app_name"
		android:gravity="center" />
		
	<Button
		android:layout_width="wrap_content"
		android:layout_height="wrap_content"
		android:layout_margin="100dp"
		android:text="@string/add_account"
		android:onClick="onAddAccountClicked"
		android:layout_gravity="center|bottom" />
	
</FrameLayout>
<<levo>>
{{end}}