{{$package := .PackageName}}
{{$project := .ProjectName}}
{{$path := .PackagePath}}
{{range .Models}}
<<levo filename:{{titlecase .Name}}ListFragment.java directory:src/{{$path}}/fragments>>
package {{$package}}.fragments;

import java.util.Arrays;
import java.util.Collection;

import android.net.Uri;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AbsListView;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.CursorAdapter;
import android.widget.Toast;

import io.pivotal.arca.adapters.Binding;
import io.pivotal.arca.adapters.ModernCursorAdapter;
import io.pivotal.arca.dispatcher.Error;
import io.pivotal.arca.dispatcher.Query;
import io.pivotal.arca.dispatcher.QueryResult;
import io.pivotal.arca.fragments.ArcaAdapterFragment;
import io.pivotal.arca.monitor.ArcaDispatcher;
import {{$package}}.R;
import {{$package}}.binders.{{titlecase .Name}}ListViewBinder;
import {{$package}}.datasets.{{titlecase .Name}}Table;
import {{$package}}.monitors.{{titlecase .Name}}ListMonitor;
import {{$package}}.providers.{{titlecase $project}}ContentProvider;

public class {{titlecase .Name}}ListFragment extends ArcaAdapterFragment implements OnItemClickListener {

	private static final Collection<Binding> BINDINGS = Arrays.asList(new Binding[] {
		{{$model := .Name}}!>
		{{range .Properties}}!>
			{{if isSqliteType .}}!>
		new Binding(R.id.{{snakecase $model}}_{{snakecase .LocalIdentifier}}, {{titlecase $model}}Table.Columns.{{snakecase .LocalIdentifier | upper}}.name),
			{{end}}!>
		{{end}}!>
	});

	@Override
	public View onCreateView(final LayoutInflater inflater, final ViewGroup container, final Bundle savedInstanceState) {
		final View view = inflater.inflate(R.layout.fragment_{{snakecase .Name}}_list, container, false);
		final AbsListView list = (AbsListView) view.findViewById(getAdapterViewId());
		list.setOnItemClickListener(this);
		return view;
	}

	@Override
	public CursorAdapter onCreateAdapter(final AdapterView<CursorAdapter> adapterView, final Bundle savedInstanceState) {
		final ModernCursorAdapter adapter = new ModernCursorAdapter(getActivity(), R.layout.list_item_{{snakecase .Name}}, BINDINGS);
		adapter.setViewBinder(new {{titlecase .Name}}ListViewBinder());
		return adapter;
	}

	@Override
	public ArcaDispatcher onCreateDispatcher(final Bundle savedInstaceState) {
		final ArcaDispatcher dispatcher = super.onCreateDispatcher(savedInstaceState);
		dispatcher.setRequestMonitor(new {{titlecase .Name}}ListMonitor());
		return dispatcher;
	}

	@Override
	public void onViewCreated(final View view, final Bundle savedInstanceState) {
		super.onViewCreated(view, savedInstanceState);

		showLoading();
		load{{pluralize .Name | titlecase}}();
	}

	private void load{{pluralize .Name | titlecase}}() {
		final Uri uri = {{titlecase $project}}ContentProvider.Uris.{{pluralize .Name | snakecase | upper}};
		final Query request = new Query(uri);
		execute(request);
	}

	@Override
	public void onContentChanged(final QueryResult result) {
		final CursorAdapter adapter = getCursorAdapter();
		if (adapter.getCount() > 0) {
			showResults();
		} else if (!result.isSyncing()) {
			showNoResults();
		}
	}

	@Override
	public void onContentError(final Error error) {
		showNoResults();
		showError(error);
	}

	private View getLoadingView() {
		return getView().findViewById(R.id.loading);
	}

	private View getEmptyView() {
		return getView().findViewById(R.id.empty);
	}

	private void showLoading() {
		getAdapterView().setVisibility(View.INVISIBLE);
		getLoadingView().setVisibility(View.VISIBLE);
		getEmptyView().setVisibility(View.INVISIBLE);
	}

	private void showResults() {
		getAdapterView().setVisibility(View.VISIBLE);
		getLoadingView().setVisibility(View.INVISIBLE);
		getEmptyView().setVisibility(View.INVISIBLE);
	}

	private void showNoResults() {
		getAdapterView().setVisibility(View.INVISIBLE);
		getLoadingView().setVisibility(View.INVISIBLE);
		getEmptyView().setVisibility(View.VISIBLE);
	}

	private void showError(final Error error) {
		final String message = String.format("ERROR: %s", error.getMessage());
		Toast.makeText(getActivity(), message, Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onItemClick(final AdapterView<?> adapterView, final View view, final int position, final long id) {
		// final Cursor cursor = (Cursor) adapterView.getItemAtPosition(position);
		// final int columnIndex = cursor.getColumnIndex({{titlecase .Name}}Table.Columns.{{idProp .Properties}}.name);
		// final String itemId = cursor.getString(columnIndex);
		// {{titlecase .Name}}Activity.newInstance(getActivity(), itemId);
	}
}
<<levo>>
<<levo filename:{{titlecase .Name}}ListViewBinder.java directory:src/{{$path}}/binders>>
package {{$package}}.binders;

import android.database.Cursor;
import android.view.View;
import android.widget.TextView;

import io.pivotal.arca.adapters.Binding;
import io.pivotal.arca.adapters.ViewBinder;

public class {{titlecase .Name}}ListViewBinder implements ViewBinder {

	@Override
	public boolean setViewValue(final View view, final Cursor cursor, final Binding binding) {
		return setDefaultValue((TextView) view, cursor, binding);
	}

	private static boolean setDefaultValue(final TextView textView, final Cursor cursor, final Binding binding) {
		final String columnName = binding.getColumnName();
		final int columnIndex = binding.getColumnIndex();
		final String text = cursor.getString(columnIndex);
		textView.setText(String.format("%s : %s", columnName, text));
		return true;
	}
}
<<levo>>
<<levo filename:{{titlecase .Name}}ListMonitor.java directory:src/{{$path}}/monitors>>
package {{$package}}.monitors;

import android.content.Context;
import android.net.Uri;

import {{$package}}.operations.Get{{titlecase .Name}}ListOperation;
import io.pivotal.arca.dispatcher.Query;
import io.pivotal.arca.dispatcher.QueryResult;
import io.pivotal.arca.monitor.RequestMonitor.AbstractRequestMonitor;
import io.pivotal.arca.service.OperationService;

public class {{titlecase .Name}}ListMonitor extends AbstractRequestMonitor {

	private static final int DELAY = 30 * 1000;
	
	private long mLastSync = 0;

	private boolean shouldSync() {
		return System.currentTimeMillis() > (mLastSync + DELAY);
	}

	public boolean startDataSync(final Context context, final Uri uri) {
		return OperationService.start(context, new Get{{titlecase .Name}}ListOperation(uri));
	}

	@Override
	public int onPostExecute(final Context context, final Query request, final QueryResult result) {
		if (shouldSync() && startDataSync(context, request.getUri())) {
			mLastSync = System.currentTimeMillis();
			return Flags.DATA_SYNCING; 
		} else {
			return 0;
		}
	}
}
<<levo>>
<<levo filename:fragment_{{snakecase .Name}}_list.xml directory:res/layout>>
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
	android:layout_width="match_parent"
	android:layout_height="match_parent" >

	<ListView
		android:id="@android:id/list"
		android:layout_width="match_parent"
		android:layout_height="match_parent"
		android:padding="10dp"
		android:visibility="gone" />

	<TextView
		android:id="@+id/empty"
		android:layout_width="match_parent"
		android:layout_height="match_parent"
		android:text="No Results Found"
		android:gravity="center"
		android:visibility="gone" />

	<ProgressBar
		android:id="@+id/loading"
		style="@android:style/Widget.ProgressBar.Small"
		android:layout_width="wrap_content"
		android:layout_height="wrap_content"
		android:layout_gravity="center" />

</FrameLayout>
<<levo>>
<<levo filename:list_item_{{snakecase .Name}}.xml directory:res/layout>>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
	android:layout_width="match_parent"
	android:layout_height="wrap_content"
	android:orientation="vertical"
	android:padding="10dp">

	{{$model := .Name}}!>
	{{range .Properties}}!>
		{{if isSqliteType .}}!>
	<TextView
		android:id="@+id/{{snakecase $model}}_{{snakecase .LocalIdentifier}}"
		android:layout_width="match_parent"
		android:layout_height="wrap_content"
		android:layout_margin="2dp" />

		{{end}}!>
	{{end}}!>
</LinearLayout>
<<levo>>
{{end}}
<<levo filename:arca-fragments-1.0-beta.jar directory:libs>>
{{template "arca-fragments-1.0-beta.jar"}}
<<levo>>
<<levo filename:arca-adapters-1.0-beta.jar directory:libs>>
{{template "arca-adapters-1.0-beta.jar"}}
<<levo>>
<<levo filename:arca-monitor-1.0-beta.jar directory:libs>>
{{template "arca-monitor-1.0-beta.jar"}}
<<levo>>
<<levo filename:arca-dispatcher-1.0-beta.jar directory:libs>>
{{template "arca-dispatcher-1.0-beta.jar"}}
<<levo>>